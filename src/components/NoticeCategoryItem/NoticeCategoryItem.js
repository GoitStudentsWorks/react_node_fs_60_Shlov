// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å, –∫–∞—Ä—Ç–æ—á–∫—É –æ–¥–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —ñ–∫–æ–Ω–∫–∞-—Å–µ—Ä—Ü–µ (AddToFavorite) —Ç–∞ LearnMore
// –ö–ª—ñ–∫ –ø–æ: 
//   - —ñ–∫–æ–Ω—Ü—ñ-—Å–µ—Ä—Ü—é (AddToFavorite):
//      - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ò–ô - –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ –¥–æ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –æ–±—Ä–∞–Ω—ñ, –ø–æ –∫–ª—ñ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –æ–±—Ä–∞–Ω—ñ –∞–±–æ –≤–∏–¥–∞–ª—è—î –∑ –Ω–∏—Ö
//      - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ò–ô, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤–∏–Ω–Ω–æ –≤–∏–≤–æ–¥–∏—Ç–∏—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É –Ω–æ—Ç—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ç–µ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
//   - LearnMore - –≤—ñ–¥–∫—Ä–∏–≤–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –º–æ–¥–∞–ª–∫—É –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –æ–ø–∏—Å–æ–º –¥–∞–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è - NoticeModal

// –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —è–∫—â–æ –¥–∞–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. 
// –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ  ModalApproveAction


import { Card, FavoriteBtn, DeleteBtn, CategoryTag, ImageWrapper, DescriptionWrapper, Title, Image, TagItem, TagList, MoreBtn, SvgIcon, HeartIcon, TrashIcon } from "./NoticeCategoryItem.styled";

import icon from '../../images/icons.svg';
import { useState } from "react";
import { ModalNotice } from "components/ModalNotice/ModalNotice";
import { ModalApproveAction } from 'components/ModalApproveAction/ModalApproveAction';
import {  Button, ButtonWrap, DescrModal, ModalContent, TitleModal, Trash, Text, ButtonTrash } from '../NoticesPage/NoticesPage.styled';
import { useDispatch, useSelector } from "react-redux";
import { selectUser } from "Redux/auth/selector";
import { deleteNotice, updateFavorite } from "Redux/notices/operation";
import { toast } from "react-hot-toast";
import icons from 'images/icons.svg';

export const NoticeCategoryItem = ({item}) => {

  const idUser = useSelector(selectUser).id;
  const activeFavorite = item.favorite.includes(idUser);
  const noticeId = item.id
  const isFavorite = !activeFavorite
  const dispatch = useDispatch();
  const agePet = (birthday) => {
    const nowDate = new Date().getTime();
    const [day, month, year] = birthday.split('.');
    const birthDate = new Date (`${Number(year)}-${Number(month)}-${Number(day)}`).getTime();
    
    const differenceTime = nowDate - birthDate
    
    if (differenceTime < 2630016000) {
      return `${Math.floor(differenceTime/604800000)} week`
    } else if ( differenceTime < 31560192000) {
      return `${Math.floor(differenceTime/2630016000)} mos`
    } else {
      return `${Math.floor(differenceTime/31560192000)} year`
    };
  }
  
  const handleFavorite = () => {
    if (!idUser) {
      toast.error('Please authorization and try again üò∏');
    }
    dispatch(updateFavorite({noticeId, isFavorite}));
  };

  const [isOpenModal, setIsOpenModal] = useState(false);
  const [isOpenModalTrash, setIsOpenModalTrash] = useState(false);

  const toggleModal = () => {
    setIsOpenModal(isOpenModal => !isOpenModal);    
  };

  const toggleTrash = () => {
    setIsOpenModalTrash(isOpenModalTrash => !isOpenModalTrash);    
  };

  const handleDeleteNotice = () => {
    if(!idUser) {
      console.log("user disconnect") 
      toast.error('Please authorization and try again!', {
        style: {
          backgroundColor: `var(--cl-background)`,
          padding: '6px',
          color: `var(--cl-black)`,
        },
        icon: 'üò∏',
      });
      return;
    }

    console.log("owner", item.owner)
    console.log("owner", idUser)

    if(item.owner !== idUser) {
      console.log("owner", item.owner)
      console.log("owner", idUser)
      console.log("user doesn`t owner notice") 
      toast.error('You aren`t the owner of this notice!', {
        style: {
          backgroundColor: `var(--cl-background)`,
          padding: '6px',
          color: `var(--cl-black)`,
        },
        icon: 'üò∏',
      });
      toggleTrash();
      return;
    }

    dispatch(deleteNotice(item.id))
    toggleTrash();
    console.log('–í–∏–¥–∞–ª—è—î–º–æ notice');
  };


  return(
    <>
      <Card>
        <ImageWrapper>
          <Image alt="pet" src={item.imageURL ? item.imageURL : "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSgGi3YJI2iukoOZ3_fbYCyoiR4dYO8fIyIu_qpphSUf8GRAmFN"}/>
          <CategoryTag>{item.categories ? item.categories : 'categories'}</CategoryTag>
          <TagList>
            <TagItem>
              <SvgIcon height="20" width="20">
                <use href={icon + "#location"}/>
              </SvgIcon>
              <p>{item.place ? item.place : 'city'}</p>
            </TagItem>
            <TagItem>
              <SvgIcon height="20" width="20">
                <use href={icon + "#clock"}/>
              </SvgIcon>
              <p>{item.birthday ? agePet(item.birthday) : 'age'}</p>
            </TagItem>
            <TagItem>
              {item.sex === 'female'
              ?<SvgIcon height="20" width="20" sex={item.sex}>
                <use href={icon + "#female"}/>
              </SvgIcon>
              :<SvgIcon height="20" width="20" sex={item.sex}>
                <use href={icon + "#male"}/>
              </SvgIcon>
              } 
              <p>{item.sex ? item.sex : 'sex'}</p>
            </TagItem>
          </TagList>
          <FavoriteBtn onClick={()=> handleFavorite()}>
            <HeartIcon height="20" width="20" isActive={activeFavorite} style={{fill: ""}}>
              <use href={icon + "#heart"}/>
            </HeartIcon>
          </FavoriteBtn>
          {item.owner === idUser && <DeleteBtn onClick={toggleTrash}>
            <TrashIcon height="20" width="20" >
              <use href={icon + "#trash"}/>
            </TrashIcon>
          </DeleteBtn>}
        </ImageWrapper>

        <DescriptionWrapper>
          <Title>{item.title ? item.title : 'Cute fox looking for a home'}</Title>
          <MoreBtn onClick={toggleModal}>Learn more</MoreBtn>
        </DescriptionWrapper>
        {isOpenModal&& <ModalNotice onClose={toggleModal} notice={item} noticeId={item.id}/>}
        {isOpenModalTrash && (
        <ModalApproveAction onClose={toggleTrash} height="389px">
          <ModalContent>
            <TitleModal>Delete adverstiment?</TitleModal>
            <DescrModal>
              <Text>Are you sure you want to delete &nbsp;
                <strong>‚ÄúCute dog looking for a home‚Äù?&nbsp;</strong>
              </Text>
              <p>You can`t undo this action.</p>
            </DescrModal>
            <ButtonWrap>
              <Button type="button" aria-label="cancel" onClick={toggleTrash}>
                Cancel
              </Button>
              <ButtonTrash type="button" aria-label="delete" onClick={handleDeleteNotice}>
                Yes
                <Trash>
                  <use href={icons + '#trash'} />
                </Trash>
              </ButtonTrash>
            </ButtonWrap>
          </ModalContent>
        </ModalApproveAction>
      )}
      </Card>
    </>
  )
}
